{
    "docs": [
        {
            "location": "/",
            "text": "Quick start, manual provisioning\n\n\nOur custom docker image\n\n\nFirst \ninstall Docker\n. We are using Docker 1.12.3. We are running Ubuntu Xenial 16.04 LTS\n\n\nThe following is a quick tutorial for deploying your site on Docker. It has been tested and works with sites like www.etopian.com. It also supports using an SSL certificate. It uses Alpine Linux for serving the actual site, the beautiful thing is that a site can be served in around 50mb of ram. Using the process below you can deploy multiple WP sites on the same box, at least 10 sites on a 1gb VPS extremely securely as each site lives in its own container.\n\n\nWe are in the process of developing a CLI to make this process much easier, star this repo:\nhttps://github.com/etopian/docker-wordpress-cli\n\n\nFor this demo we are deploying etopian.com, replace that with your custom domain.\n\n\nSecurity\n\n\nThe process serving the website, Nginx and PHP-FPM, does not run as root. It's no less secure than running a non-root user like www-data to serve your site. If you can breakout to root within the container, you can potentially get to the host system. But that's absolutely no different than any other Linux system. If you break out of www-data on a normal setup to root, then you have root. See \nWhy use Docker with WordPress\n for more.\n\n\nSite files\n\n\nSite files need to be located in, simply copy the files here:\n\n\n#Copy your WP install here, if you don't have one simply download WP and put that here\n/data/sites/etopian.com/htdocs\n\n\n\n\nFile ownership\n\n\nThe site on your host needs proper file permissions. Go to your site's folder and type the following:\n\n\nchown -R 100:101 htdocs/\n\n\n\n\nRun NGINX Proxy Container\n\n\nThis sits in front of all of your sites at port 80 serving all your sites.\n\n\ndocker run -d --name nginx -p 80:80 -p 443:443 -v /etc/nginx/htpasswd:/etc/nginx/htpasswd -v /etc/nginx/vhost.d:/etc/nginx/vhost.d:ro -v /etc/nginx/certs:/etc/nginx/certs -v /var/run/docker.sock:/tmp/docker.sock:ro etopian/nginx-proxy\n\n\n\n\nPHP-FPM + Nginx\n\n\nEach site runs in its own container with PHP-FPM and Nginx instance.\n\n\ndocker run -d --name etopian_com -e VIRTUAL_HOST=www.etopian.com,etopian.com -v /data/sites/etopian.com:/DATA etopian/alpine-php-wordpress\n\n\n\n\nMySQL Database\n\n\napt-get update && apt-get install mysql-client-core-5.6\n\ndocker run -d --name mariadb -p 172.17.0.1:3306:3306 -e MYSQL_ROOT_PASSWORD=myROOTPASSOWRD -v /data/mysql:/var/lib/mysql mariadb\n\n#login to mariadb\nmysql -uroot -pmyROOTPASSOWRD -h 172.17.0.1 -P 3306\n\n#create the db in mariadb\nCREATE DATABASE etopian_com;\nCREATE USER 'etopian_com'@'%' IDENTIFIED BY 'mydbpass';\nGRANT ALL PRIVILEGES ON  etopian_com.* TO 'etopian_com'@'%';\n\n#if you have a db, import it. if not then configure wp and install it using the interface.\nmysql -uroot -pmyROOTPASSOWRD -h 172.17.0.1 etopian_com < mydatabase.mysql\n\n\n\n\nConfigure WP\n\n\nwp-config.php\n\n\nIf you need to change the domain of the site put the follow in wp-config.php of your site.\n\n\n/** The name of the database for WordPress **/\ndefine('DB_NAME', 'etopian_com\");\n\n/** MySQL database username **/\ndefine('DB_USER', 'etopian_com');\n\n/** MySQL database password **/\ndefine('DB_PASSWORD', 'mydbpass');\n\n/** MySQL hostname **/\ndefine('DB_HOST', '172.17.0.1');\n\n\n\n\nYour site should be working as long as the DNS entries are properly set.\n\n\nwp-config.php - SSL\n\n\nPut your SSL certificate here, with the VIRTUAL_HOST as the file name: \n\n\n/etc/nginx/certs\netopian.com.crt  etopian.com.csr  etopian.com.key\n\n\n\n\nIf you use SSL you need to run your container with the filename of the certificate you are using. So rm the existing container and recreate a new one with the following environmental variable.\n\n\n -e CERT_NAME=etopian.com\n\n\n\n\nedit wp-config.php in your site's htdocs directory.\n\n\ndefine('WP_HOME','https://etopian.com');\ndefine('WP_SITEURL','https://etopian.com');\n  define('FORCE_SSL_ADMIN', true);\nif ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')\n       $_SERVER['HTTPS']='on';\n\n\n\n\nwp-config.php\n\n\nIf you need to change the domain of the site put the follow in wp-config.php of your site.\n\n\ndefine('WP_HOME','http://etopian.com');\ndefine('WP_SITEURL','http://etopian.com');\n\n\n\n\nMail\n\n\nMail is not routed by the container, you must use an SMTP plugin or Mailgun or AWS SES to route your site's email.\n\n\nMailgun works fine but the test on the WP mailgun plugin to see if it is working does not because it does not correctly set the e-mail address before attempting to send an e-mail\n\n\n\n\nhttps://wordpress.org/plugins/mailgun/\n (recommended)\n\n\nhttps://wordpress.org/plugins/wp-ses/\n\n\nhttps://wordpress.org/plugins/wp-smtp/\n\n\nhttps://wordpress.org/plugins/easy-wp-smtp/\n\n\nhttps://wordpress.org/plugins/wp-mail-bank/\n\n\n\n\nHow can I see the logs?\n\n\nCurrently, working on improving this:\n\n\ndocker logs nginx\n\n\n\n\nWP-CLI\n\n\nWP-CLI is included in the Alpine Linux image. You need the following option when running the Alpine Linux container to not see the error when trying to use it.\n\n\n-e TERM=xterm\n\n\n\n\nRedis\n\n\nIt is possible to speed up your site with Redis... You need enough memory to support Redis obviously.\n\n\nYou need the following WP plugin:\nhttps://wordpress.org/plugins/redis-cache/\n\n\nPut this in your wp-config.php below the DB_HOST and DB_NAME entries.\n\n\ndefine('WP_REDIS_HOST', DB_HOST);\ndefine('WP_CACHE_KEY_SALT', DB_NAME); \n\n\n\n\nDeploy Redis\n\n\ndocker run --name redis -p 172.17.0.1:6379:6379 redis\n\n\n\n\nGo to your site's dashboard and activate the Redis object cache.\n\n\nSettings > Redis and click the button to activate.\n\n\n\n\nModifying the image\n\n\nThe image for Alpine Linux running PHP may be found here:\nhttps://github.com/etopian/alpine-php-wordpress\n\n\nYou may fork it and modify it to add additional modules and what not.\n\n\nAdding new PHP modules\n\n\n\n\nThe following modules are included with the image etopian/alpine-php-wordpress\n\n\n\n\n    php7-fpm php7-json php7-zlib php7-xml php7-pdo php7-phar php7-openssl \\\n    php7-pdo_mysql php7-mysqli php7-session \\\n    php7-gd php7-iconv php7-mcrypt \\\n    php7-curl php7-opcache php7-ctype php7-apcu \\\n    php7-intl php7-bcmath php7-dom php7-xmlreader\n\n\n\n\nList of PHP Modules\n\n\n\n\nList of available modules in Alpine Linux, not all these are installed.\n\n\nIn order to install a php module do, (leave out the version number i.e. -5.7.0.13-r0\n\n\n\n\ndocker exec <container_name> apk add <pkg_name>\ndocker restart <container_name>\n\n\n\n\n\nExample:\n\n\ndocker exec <container_name> apk update #do this once.\ndocker exec <container_name> apk add php-soap\ndocker restart <container_name>\n\n\n\n\nphp7-intl-7.0.13-r0\nphp7-openssl-7.0.13-r0\nphp7-dba-7.0.13-r0\nphp7-sqlite3-7.0.13-r0\nphp7-pear-7.0.13-r0\nphp7-phpdbg-7.0.13-r0\nphp7-litespeed-7.0.13-r0\nphp7-gmp-7.0.13-r0\nphp7-pdo_mysql-7.0.13-r0\nphp7-pcntl-7.0.13-r0\nphp7-common-7.0.13-r0\nphp7-oauth-2.0.1-r0\nphp7-xsl-7.0.13-r0\nphp7-fpm-7.0.13-r0\nphp7-gmagick-2.0.4_rc1-r2\nphp7-mysqlnd-7.0.13-r0\nphp7-enchant-7.0.13-r0\nphp7-solr-2.4.0-r0\nphp7-uuid-1.0.4-r0\nphp7-pspell-7.0.13-r0\nphp7-ast-0.1.1-r0\nphp7-redis-3.0.0-r1\nphp7-snmp-7.0.13-r0\nphp7-doc-7.0.13-r0\nphp7-mbstring-7.0.13-r0\nphp7-lzf-1.6.5-r1\nphp7-timezonedb-2016.3-r0\nphp7-dev-7.0.13-r0\nphp7-xmlrpc-7.0.13-r0\nphp7-rdkafka-2.0.0-r0\nphp7-stats-2.0.1-r0\nphp7-embed-7.0.13-r0\nphp7-xmlreader-7.0.13-r0\nphp7-pdo_sqlite-7.0.13-r0\nphp7-exif-7.0.13-r0\nphp7-msgpack-2.0.1-r0\nphp7-opcache-7.0.13-r0\nphp7-ldap-7.0.13-r0\nphp7-posix-7.0.13-r0\nphp7-session-7.0.13-r0\nphp7-gd-7.0.13-r0\nphp7-gettext-7.0.13-r0\nphp7-mailparse-3.0.1-r0\nphp7-json-7.0.13-r0\nphp7-xml-7.0.13-r0\nphp7-mongodb-1.1.4-r1\nphp7-7.0.13-r0\nphp7-iconv-7.0.13-r0\nphp7-sysvshm-7.0.13-r0\nphp7-curl-7.0.13-r0\nphp7-shmop-7.0.13-r0\nphp7-odbc-7.0.13-r0\nphp7-phar-7.0.13-r0\nphp7-pdo_pgsql-7.0.13-r0\nphp7-imap-7.0.13-r0\nphp7-pdo_dblib-7.0.13-r0\nphp7-pgsql-7.0.13-r0\nphp7-pdo_odbc-7.0.13-r0\nphp7-xdebug-2.4.1-r0\nphp7-zip-7.0.13-r0\nphp7-apache2-7.0.13-r0\nphp7-cgi-7.0.13-r0\nphp7-ctype-7.0.13-r0\nphp7-inotify-2.0.0-r0\nphp7-couchbase-2.2.3-r1\nphp7-amqp-1.7.1-r0\nphp7-mcrypt-7.0.13-r0\nphp7-readline-7.0.13-r0\nphp7-wddx-7.0.13-r0\nphp7-cassandra-1.2.2-r0\nphp7-libsodium-1.0.6-r0\nphp7-bcmath-7.0.13-r0\nphp7-calendar-7.0.13-r0\nphp7-tidy-7.0.13-r0\nphp7-dom-7.0.13-r0\nphp7-sockets-7.0.13-r0\nphp7-zmq-1.1.3-r0\nphp7-memcached-3.0_pre20160808-r0\nphp7-soap-7.0.13-r0\nphp7-apcu-5.1.6-r0\nphp7-sysvmsg-7.0.13-r0\nphp7-zlib-7.0.13-r0\nphp7-ssh2-1.0-r0\nphp7-ftp-7.0.13-r0\nphp7-sysvsem-7.0.13-r0\nphp7-pdo-7.0.13-r0\nphp7-bz2-7.0.13-r0\nphp7-mysqli-7.0.13-r0\n\n\n\n\nFirewall\n\n\nYou should also deploy a firewall on your box. However, it's very easy to lock yourself out of your box, so I will not give you exact instructions on how to do it. The following is what I use for my box using arno-iptables-firewall.\n\n\nOnce the firewall is in place, notice when the box reboots, Docker might not start in the right order and therefore the iptables rules it might need might not be initialized and due to this things might not work. Simply restart the Docker service:\n\n\nservice docker restart\n\n\n\n\n#######################################################################\n# Feel free to edit this file.  However, be aware that debconf writes #\n# to (and reads from) this file too.  In case of doubt, only use      #\n# 'dpkg-reconfigure -plow arno-iptables-firewall' to edit this file.  #\n# If you really don't want to use debconf, or if you have specific    #\n# needs, you're likely better off using placing an additional         #\n# configuration snippet into/etc/arno-iptables-firewall/conf.d/.      #\n# Also see README.Debian.                                             #\n#######################################################################\n\n\nEXT_IF=\"eth0\"\nEXT_IF_DHCP_IP=1\nOPEN_TCP=\"22 80 443\"\nOPEN_UDP=\"\"\nINT_IF=\"docker0\"\nNAT=1\nINTERNAL_NET=\"172.17.0.1/16\"\nNAT_INTERNAL_NET=\"192.168.1.0/24 192.168.2.0/24 172.17.0.1/16\"\nOPEN_ICMP=1\n\n\n\n\nHave issues, comments or questions: https://github.com/etopian/docker-wordpress/issues\n\n\n\n\nDocker DOES NOT own, operate, license, sponsors or authorizes this site. Docker\u00ae is a registered trademark of Docker, Inc. wordpressdocker.com Unofficial WordPress Docker Tutorial is not affiliated with Docker, Inc.",
            "title": "Home"
        },
        {
            "location": "/#quick-start-manual-provisioning",
            "text": "",
            "title": "Quick start, manual provisioning"
        },
        {
            "location": "/#our-custom-docker-image",
            "text": "First  install Docker . We are using Docker 1.12.3. We are running Ubuntu Xenial 16.04 LTS  The following is a quick tutorial for deploying your site on Docker. It has been tested and works with sites like www.etopian.com. It also supports using an SSL certificate. It uses Alpine Linux for serving the actual site, the beautiful thing is that a site can be served in around 50mb of ram. Using the process below you can deploy multiple WP sites on the same box, at least 10 sites on a 1gb VPS extremely securely as each site lives in its own container.  We are in the process of developing a CLI to make this process much easier, star this repo:\nhttps://github.com/etopian/docker-wordpress-cli  For this demo we are deploying etopian.com, replace that with your custom domain.",
            "title": "Our custom docker image"
        },
        {
            "location": "/#security",
            "text": "The process serving the website, Nginx and PHP-FPM, does not run as root. It's no less secure than running a non-root user like www-data to serve your site. If you can breakout to root within the container, you can potentially get to the host system. But that's absolutely no different than any other Linux system. If you break out of www-data on a normal setup to root, then you have root. See  Why use Docker with WordPress  for more.",
            "title": "Security"
        },
        {
            "location": "/#site-files",
            "text": "Site files need to be located in, simply copy the files here:  #Copy your WP install here, if you don't have one simply download WP and put that here\n/data/sites/etopian.com/htdocs",
            "title": "Site files"
        },
        {
            "location": "/#file-ownership",
            "text": "The site on your host needs proper file permissions. Go to your site's folder and type the following:  chown -R 100:101 htdocs/",
            "title": "File ownership"
        },
        {
            "location": "/#run-nginx-proxy-container",
            "text": "This sits in front of all of your sites at port 80 serving all your sites.  docker run -d --name nginx -p 80:80 -p 443:443 -v /etc/nginx/htpasswd:/etc/nginx/htpasswd -v /etc/nginx/vhost.d:/etc/nginx/vhost.d:ro -v /etc/nginx/certs:/etc/nginx/certs -v /var/run/docker.sock:/tmp/docker.sock:ro etopian/nginx-proxy",
            "title": "Run NGINX Proxy Container"
        },
        {
            "location": "/#php-fpm-nginx",
            "text": "Each site runs in its own container with PHP-FPM and Nginx instance.  docker run -d --name etopian_com -e VIRTUAL_HOST=www.etopian.com,etopian.com -v /data/sites/etopian.com:/DATA etopian/alpine-php-wordpress",
            "title": "PHP-FPM + Nginx"
        },
        {
            "location": "/#mysql-database",
            "text": "apt-get update && apt-get install mysql-client-core-5.6\n\ndocker run -d --name mariadb -p 172.17.0.1:3306:3306 -e MYSQL_ROOT_PASSWORD=myROOTPASSOWRD -v /data/mysql:/var/lib/mysql mariadb\n\n#login to mariadb\nmysql -uroot -pmyROOTPASSOWRD -h 172.17.0.1 -P 3306\n\n#create the db in mariadb\nCREATE DATABASE etopian_com;\nCREATE USER 'etopian_com'@'%' IDENTIFIED BY 'mydbpass';\nGRANT ALL PRIVILEGES ON  etopian_com.* TO 'etopian_com'@'%';\n\n#if you have a db, import it. if not then configure wp and install it using the interface.\nmysql -uroot -pmyROOTPASSOWRD -h 172.17.0.1 etopian_com < mydatabase.mysql",
            "title": "MySQL Database"
        },
        {
            "location": "/#configure-wp",
            "text": "",
            "title": "Configure WP"
        },
        {
            "location": "/#wp-configphp",
            "text": "If you need to change the domain of the site put the follow in wp-config.php of your site.  /** The name of the database for WordPress **/\ndefine('DB_NAME', 'etopian_com\");\n\n/** MySQL database username **/\ndefine('DB_USER', 'etopian_com');\n\n/** MySQL database password **/\ndefine('DB_PASSWORD', 'mydbpass');\n\n/** MySQL hostname **/\ndefine('DB_HOST', '172.17.0.1');  Your site should be working as long as the DNS entries are properly set.",
            "title": "wp-config.php"
        },
        {
            "location": "/#wp-configphp-ssl",
            "text": "Put your SSL certificate here, with the VIRTUAL_HOST as the file name:   /etc/nginx/certs\netopian.com.crt  etopian.com.csr  etopian.com.key  If you use SSL you need to run your container with the filename of the certificate you are using. So rm the existing container and recreate a new one with the following environmental variable.   -e CERT_NAME=etopian.com  edit wp-config.php in your site's htdocs directory.  define('WP_HOME','https://etopian.com');\ndefine('WP_SITEURL','https://etopian.com');\n  define('FORCE_SSL_ADMIN', true);\nif ($_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')\n       $_SERVER['HTTPS']='on';",
            "title": "wp-config.php - SSL"
        },
        {
            "location": "/#wp-configphp_1",
            "text": "If you need to change the domain of the site put the follow in wp-config.php of your site.  define('WP_HOME','http://etopian.com');\ndefine('WP_SITEURL','http://etopian.com');",
            "title": "wp-config.php"
        },
        {
            "location": "/#mail",
            "text": "Mail is not routed by the container, you must use an SMTP plugin or Mailgun or AWS SES to route your site's email.  Mailgun works fine but the test on the WP mailgun plugin to see if it is working does not because it does not correctly set the e-mail address before attempting to send an e-mail   https://wordpress.org/plugins/mailgun/  (recommended)  https://wordpress.org/plugins/wp-ses/  https://wordpress.org/plugins/wp-smtp/  https://wordpress.org/plugins/easy-wp-smtp/  https://wordpress.org/plugins/wp-mail-bank/",
            "title": "Mail"
        },
        {
            "location": "/#how-can-i-see-the-logs",
            "text": "Currently, working on improving this:  docker logs nginx",
            "title": "How can I see the logs?"
        },
        {
            "location": "/#wp-cli",
            "text": "WP-CLI is included in the Alpine Linux image. You need the following option when running the Alpine Linux container to not see the error when trying to use it.  -e TERM=xterm",
            "title": "WP-CLI"
        },
        {
            "location": "/#redis",
            "text": "It is possible to speed up your site with Redis... You need enough memory to support Redis obviously.  You need the following WP plugin:\nhttps://wordpress.org/plugins/redis-cache/  Put this in your wp-config.php below the DB_HOST and DB_NAME entries.  define('WP_REDIS_HOST', DB_HOST);\ndefine('WP_CACHE_KEY_SALT', DB_NAME);   Deploy Redis  docker run --name redis -p 172.17.0.1:6379:6379 redis  Go to your site's dashboard and activate the Redis object cache.  Settings > Redis and click the button to activate.",
            "title": "Redis"
        },
        {
            "location": "/#modifying-the-image",
            "text": "The image for Alpine Linux running PHP may be found here:\nhttps://github.com/etopian/alpine-php-wordpress  You may fork it and modify it to add additional modules and what not.",
            "title": "Modifying the image"
        },
        {
            "location": "/#adding-new-php-modules",
            "text": "The following modules are included with the image etopian/alpine-php-wordpress       php7-fpm php7-json php7-zlib php7-xml php7-pdo php7-phar php7-openssl \\\n    php7-pdo_mysql php7-mysqli php7-session \\\n    php7-gd php7-iconv php7-mcrypt \\\n    php7-curl php7-opcache php7-ctype php7-apcu \\\n    php7-intl php7-bcmath php7-dom php7-xmlreader",
            "title": "Adding new PHP modules"
        },
        {
            "location": "/#list-of-php-modules",
            "text": "List of available modules in Alpine Linux, not all these are installed.  In order to install a php module do, (leave out the version number i.e. -5.7.0.13-r0   docker exec <container_name> apk add <pkg_name>\ndocker restart <container_name>  Example:  docker exec <container_name> apk update #do this once.\ndocker exec <container_name> apk add php-soap\ndocker restart <container_name>  php7-intl-7.0.13-r0\nphp7-openssl-7.0.13-r0\nphp7-dba-7.0.13-r0\nphp7-sqlite3-7.0.13-r0\nphp7-pear-7.0.13-r0\nphp7-phpdbg-7.0.13-r0\nphp7-litespeed-7.0.13-r0\nphp7-gmp-7.0.13-r0\nphp7-pdo_mysql-7.0.13-r0\nphp7-pcntl-7.0.13-r0\nphp7-common-7.0.13-r0\nphp7-oauth-2.0.1-r0\nphp7-xsl-7.0.13-r0\nphp7-fpm-7.0.13-r0\nphp7-gmagick-2.0.4_rc1-r2\nphp7-mysqlnd-7.0.13-r0\nphp7-enchant-7.0.13-r0\nphp7-solr-2.4.0-r0\nphp7-uuid-1.0.4-r0\nphp7-pspell-7.0.13-r0\nphp7-ast-0.1.1-r0\nphp7-redis-3.0.0-r1\nphp7-snmp-7.0.13-r0\nphp7-doc-7.0.13-r0\nphp7-mbstring-7.0.13-r0\nphp7-lzf-1.6.5-r1\nphp7-timezonedb-2016.3-r0\nphp7-dev-7.0.13-r0\nphp7-xmlrpc-7.0.13-r0\nphp7-rdkafka-2.0.0-r0\nphp7-stats-2.0.1-r0\nphp7-embed-7.0.13-r0\nphp7-xmlreader-7.0.13-r0\nphp7-pdo_sqlite-7.0.13-r0\nphp7-exif-7.0.13-r0\nphp7-msgpack-2.0.1-r0\nphp7-opcache-7.0.13-r0\nphp7-ldap-7.0.13-r0\nphp7-posix-7.0.13-r0\nphp7-session-7.0.13-r0\nphp7-gd-7.0.13-r0\nphp7-gettext-7.0.13-r0\nphp7-mailparse-3.0.1-r0\nphp7-json-7.0.13-r0\nphp7-xml-7.0.13-r0\nphp7-mongodb-1.1.4-r1\nphp7-7.0.13-r0\nphp7-iconv-7.0.13-r0\nphp7-sysvshm-7.0.13-r0\nphp7-curl-7.0.13-r0\nphp7-shmop-7.0.13-r0\nphp7-odbc-7.0.13-r0\nphp7-phar-7.0.13-r0\nphp7-pdo_pgsql-7.0.13-r0\nphp7-imap-7.0.13-r0\nphp7-pdo_dblib-7.0.13-r0\nphp7-pgsql-7.0.13-r0\nphp7-pdo_odbc-7.0.13-r0\nphp7-xdebug-2.4.1-r0\nphp7-zip-7.0.13-r0\nphp7-apache2-7.0.13-r0\nphp7-cgi-7.0.13-r0\nphp7-ctype-7.0.13-r0\nphp7-inotify-2.0.0-r0\nphp7-couchbase-2.2.3-r1\nphp7-amqp-1.7.1-r0\nphp7-mcrypt-7.0.13-r0\nphp7-readline-7.0.13-r0\nphp7-wddx-7.0.13-r0\nphp7-cassandra-1.2.2-r0\nphp7-libsodium-1.0.6-r0\nphp7-bcmath-7.0.13-r0\nphp7-calendar-7.0.13-r0\nphp7-tidy-7.0.13-r0\nphp7-dom-7.0.13-r0\nphp7-sockets-7.0.13-r0\nphp7-zmq-1.1.3-r0\nphp7-memcached-3.0_pre20160808-r0\nphp7-soap-7.0.13-r0\nphp7-apcu-5.1.6-r0\nphp7-sysvmsg-7.0.13-r0\nphp7-zlib-7.0.13-r0\nphp7-ssh2-1.0-r0\nphp7-ftp-7.0.13-r0\nphp7-sysvsem-7.0.13-r0\nphp7-pdo-7.0.13-r0\nphp7-bz2-7.0.13-r0\nphp7-mysqli-7.0.13-r0",
            "title": "List of PHP Modules"
        },
        {
            "location": "/#firewall",
            "text": "You should also deploy a firewall on your box. However, it's very easy to lock yourself out of your box, so I will not give you exact instructions on how to do it. The following is what I use for my box using arno-iptables-firewall.  Once the firewall is in place, notice when the box reboots, Docker might not start in the right order and therefore the iptables rules it might need might not be initialized and due to this things might not work. Simply restart the Docker service:  service docker restart  #######################################################################\n# Feel free to edit this file.  However, be aware that debconf writes #\n# to (and reads from) this file too.  In case of doubt, only use      #\n# 'dpkg-reconfigure -plow arno-iptables-firewall' to edit this file.  #\n# If you really don't want to use debconf, or if you have specific    #\n# needs, you're likely better off using placing an additional         #\n# configuration snippet into/etc/arno-iptables-firewall/conf.d/.      #\n# Also see README.Debian.                                             #\n#######################################################################\n\n\nEXT_IF=\"eth0\"\nEXT_IF_DHCP_IP=1\nOPEN_TCP=\"22 80 443\"\nOPEN_UDP=\"\"\nINT_IF=\"docker0\"\nNAT=1\nINTERNAL_NET=\"172.17.0.1/16\"\nNAT_INTERNAL_NET=\"192.168.1.0/24 192.168.2.0/24 172.17.0.1/16\"\nOPEN_ICMP=1",
            "title": "Firewall"
        },
        {
            "location": "/#have-issues-comments-or-questions-httpsgithubcometopiandocker-wordpressissues",
            "text": "Docker DOES NOT own, operate, license, sponsors or authorizes this site. Docker\u00ae is a registered trademark of Docker, Inc. wordpressdocker.com Unofficial WordPress Docker Tutorial is not affiliated with Docker, Inc.",
            "title": "Have issues, comments or questions: https://github.com/etopian/docker-wordpress/issues"
        },
        {
            "location": "/mailgun-ssmtp/",
            "text": "Mailgun with sSMTP\n\n\napt-get install ssmtp mailutils\n\n\n\n\nssmtp.conf\n\n\n# Are users allowed to set their own From: address?\n# YES - Allow the user to specify their own From: address\n# NO - Use the system generated From: address\n#FromLineOverride=YES\n\n# The user that gets all the mails (UID < 1000, usually the admin)\nroot=postmaster@domain.com\n\n# The mail server (where the mail is sent to), both port 465 or 587 should be acceptable\n# See also http://mail.google.com/support/bin/answer.py?answer=78799\nmailhub=smtp.mailgun.org:587\n\n# The address where the mail appears to come from for user authentication.\nrewriteDomain=domain.com\n\n# The full hostname\nhostname=ks4001046.ip-198-245-49.net\n\n# Use SSL/TLS before starting negotiation\nUseTLS=Yes\nUseSTARTTLS=Yes\n\n# Username/Password\nAuthUser=postmaster@domain.com\nAuthPass=a6e7fb5c89d354442db807d8919cf061\n\n# Email 'From header's can \n\n\n\n\nrevaliases\n\n\n# sSMTP aliases\n# \n# Format:   local_account:outgoing_address:mailhub\n#\n# Example: root:your_login@your.domain:mailhub.your.domain[:port]\n# where [:port] is an optional port number that defaults to 25.\n\nroot:postmaster@domain.com:smtp.mailgun.org:587",
            "title": "Mailgun ssmtp"
        },
        {
            "location": "/mailgun-ssmtp/#mailgun-with-ssmtp",
            "text": "apt-get install ssmtp mailutils  ssmtp.conf  # Are users allowed to set their own From: address?\n# YES - Allow the user to specify their own From: address\n# NO - Use the system generated From: address\n#FromLineOverride=YES\n\n# The user that gets all the mails (UID < 1000, usually the admin)\nroot=postmaster@domain.com\n\n# The mail server (where the mail is sent to), both port 465 or 587 should be acceptable\n# See also http://mail.google.com/support/bin/answer.py?answer=78799\nmailhub=smtp.mailgun.org:587\n\n# The address where the mail appears to come from for user authentication.\nrewriteDomain=domain.com\n\n# The full hostname\nhostname=ks4001046.ip-198-245-49.net\n\n# Use SSL/TLS before starting negotiation\nUseTLS=Yes\nUseSTARTTLS=Yes\n\n# Username/Password\nAuthUser=postmaster@domain.com\nAuthPass=a6e7fb5c89d354442db807d8919cf061\n\n# Email 'From header's can   revaliases  # sSMTP aliases\n# \n# Format:   local_account:outgoing_address:mailhub\n#\n# Example: root:your_login@your.domain:mailhub.your.domain[:port]\n# where [:port] is an optional port number that defaults to 25.\n\nroot:postmaster@domain.com:smtp.mailgun.org:587",
            "title": "Mailgun with sSMTP"
        },
        {
            "location": "/docker/Install-Docker-on-Ubuntu/",
            "text": "Install Docker on Ubuntu 16.04 LTS\n\n\nInstall Docker on Ubuntu 16.04 LTS. Below is a bash script containing a number of commands which will automatically install Docker on your VPS or dedicated server.\n\n\n#!/bin/bash\n\napt-get update\napt-get install -y apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho 'deb https://apt.dockerproject.org/repo ubuntu-xenial main' > /etc/apt/sources.list.d/docker.list\napt-get update\n#apt-cache policy docker-engine\n\n#apt-get update\napt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual\n#apt-get update\napt-get install -y docker-engine\nservice docker start\n\n\n\n\nNow Docker is installed on your Ubuntu box... Time to install WordPress",
            "title": "Install Docker on Ubuntu"
        },
        {
            "location": "/docker/Install-Docker-on-Ubuntu/#install-docker-on-ubuntu-1604-lts",
            "text": "Install Docker on Ubuntu 16.04 LTS. Below is a bash script containing a number of commands which will automatically install Docker on your VPS or dedicated server.  #!/bin/bash\n\napt-get update\napt-get install -y apt-transport-https ca-certificates\napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\necho 'deb https://apt.dockerproject.org/repo ubuntu-xenial main' > /etc/apt/sources.list.d/docker.list\napt-get update\n#apt-cache policy docker-engine\n\n#apt-get update\napt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual\n#apt-get update\napt-get install -y docker-engine\nservice docker start  Now Docker is installed on your Ubuntu box... Time to install WordPress",
            "title": "Install Docker on Ubuntu 16.04 LTS"
        },
        {
            "location": "/docker/Upgrading-Containers/",
            "text": "Upgrading Containers\n\n\nOne of the key benefits of using Docker is the fact that it makes deployment of software eaiser. It packs everything you need into an container and ships that entire container with the entire enviornment. This makes deploying more predictable than the old method of just pushing the files and then keeping the operating system up to date in hopes that everything keeps working.\n\n\nThe Old Way\n\n\nSite upgrades currently are difficult. If, for instance, you are using Ubuntu you can upgrade a website quickly using something like the following:\n\n\napt-get update && apt-get upgrade\n\n\n\n\nIf you do this, what guarantees do you have that your site will actually come up after the upgrade is done? None! An upgrade may very well kill your site and there is no way to revert the site if this happens.\n\n\nWith Docker things are different. If you need to upgrade your site, you do not upgrade the entire operating system. You deploy a new container running a single site, your site, while keeping the existing container so you can revert if the upgrade fails. \n\n\nThe Docker Way\n\n\nSay that you deploy a new WP site with Docker (a contrived example):\n\n\ndocker run -d --name=mysite_com -v /data/mysite_com:/var/sites/mysite_com wordpress\n\n\n\n\nA few months later a new container is released for WordPress. This new container includes a new version of PHP.\n\n\ndocker pull wordpress\n\n\n\n\nNow you can rename your existing container:\n\n\ndocker rename mysite_com mysite_com_old\n\n\n\n\nStop the old container:\n\n\ndocker stop mysite_com_old\n\n\n\n\nStart a new container, with the new image that you pulled:\n\n\ndocker run -d --name=mysite_com -v /data/mysite_com:/var/sites/mysite_com wordpress\n\n\n\n\nIf the new container is not working, stop the new site:\n\n\ndocker stop mysite_com\n\n\n\n\nRename it to _notworking:\n\n\ndocker rename mysite_com mysite_com_notworking\n\n\n\n\nRename the old container back:\n\n\ndocker rename mysite_com_old mysite_com\n\n\n\n\nRestart the old container:\n\n\ndocker start mysite_com\n\n\n\n\nRemove the nonworking container:\n\n\ndocker rm mysite_com_notworking",
            "title": "Upgrading Containers"
        },
        {
            "location": "/docker/Upgrading-Containers/#upgrading-containers",
            "text": "One of the key benefits of using Docker is the fact that it makes deployment of software eaiser. It packs everything you need into an container and ships that entire container with the entire enviornment. This makes deploying more predictable than the old method of just pushing the files and then keeping the operating system up to date in hopes that everything keeps working.",
            "title": "Upgrading Containers"
        },
        {
            "location": "/docker/Upgrading-Containers/#the-old-way",
            "text": "Site upgrades currently are difficult. If, for instance, you are using Ubuntu you can upgrade a website quickly using something like the following:  apt-get update && apt-get upgrade  If you do this, what guarantees do you have that your site will actually come up after the upgrade is done? None! An upgrade may very well kill your site and there is no way to revert the site if this happens.  With Docker things are different. If you need to upgrade your site, you do not upgrade the entire operating system. You deploy a new container running a single site, your site, while keeping the existing container so you can revert if the upgrade fails.",
            "title": "The Old Way"
        },
        {
            "location": "/docker/Upgrading-Containers/#the-docker-way",
            "text": "Say that you deploy a new WP site with Docker (a contrived example):  docker run -d --name=mysite_com -v /data/mysite_com:/var/sites/mysite_com wordpress  A few months later a new container is released for WordPress. This new container includes a new version of PHP.  docker pull wordpress  Now you can rename your existing container:  docker rename mysite_com mysite_com_old  Stop the old container:  docker stop mysite_com_old  Start a new container, with the new image that you pulled:  docker run -d --name=mysite_com -v /data/mysite_com:/var/sites/mysite_com wordpress  If the new container is not working, stop the new site:  docker stop mysite_com  Rename it to _notworking:  docker rename mysite_com mysite_com_notworking  Rename the old container back:  docker rename mysite_com_old mysite_com  Restart the old container:  docker start mysite_com  Remove the nonworking container:  docker rm mysite_com_notworking",
            "title": "The Docker Way"
        },
        {
            "location": "/docker/What-is-Docker/",
            "text": "What is Docker?\n\n\nDocker is containerizing technology that allows easy packaging of apps into containers. This solves the problem of deployment. With Docker you can type a single command into your console and your application can be downloaded and installed. What's more, your application be downloaded and installed in an independent copy of the operating system with an independent file system. This environment will still run off of the main Linux kernel which is more efficient than running a virtual private server, a VPS, for each site.\n\n\nDocker prefers that you deploy one service per container, however this is not a hard requirement. You may deploy more than one service per container if it makes sense for the specific use case. In this sense it can be used similarly to a VPS. It allows you to isolate one or more processes in a self contained environment. The Docker way of doing things is different from the way that we did things and it is in many ways better.",
            "title": "What is Docker"
        },
        {
            "location": "/docker/What-is-Docker/#what-is-docker",
            "text": "Docker is containerizing technology that allows easy packaging of apps into containers. This solves the problem of deployment. With Docker you can type a single command into your console and your application can be downloaded and installed. What's more, your application be downloaded and installed in an independent copy of the operating system with an independent file system. This environment will still run off of the main Linux kernel which is more efficient than running a virtual private server, a VPS, for each site.  Docker prefers that you deploy one service per container, however this is not a hard requirement. You may deploy more than one service per container if it makes sense for the specific use case. In this sense it can be used similarly to a VPS. It allows you to isolate one or more processes in a self contained environment. The Docker way of doing things is different from the way that we did things and it is in many ways better.",
            "title": "What is Docker?"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/",
            "text": "Why Use Docker with WordPress?\n\n\nSecurity\n\n\nMalware\n\n\nWordPress sites are often hacked. Often the issue is not core WP but instead an insecure plugin, like for instance recently it was Gravity forms. Once a site is hacked, it then has to be cleaned up. Malware can infect all files on all sites owned by the same Unix user. Companies like Sucuri or Sitelock focus on monitoring for such hacks and provide remediation services to clean up the site once the site is hacked. They encourage users to keep their sites updated, but often this is not enough as the vunerability is discovered after it has been used to exploit many sites. Docker helps by isolating each site in its container, keeping the malware confined to a single exploited site. There are other methods of doing this, like Chroot, but Docker makes this trivial.\n\n\nData theft\n\n\nOnce a site is exploited, all data on the site is available for the attacker to download. If multiple sites are running on the same server with the same user, say www-data, or the same group with the wrong file permissions. Then all data for all sites can be accessed by the attacker. This allows the attacked to steal hashed passwords, private information, usernames or anything else that might be of value and is accessible by the user. That can then later be used to attack yet other sites and deface them, steal e-mails, and so on.\n\n\nLoss of search engine ranking\n\n\nExploited sites may produce different content which could cause your listing to lose rank. They may also host malware which is served to desktop comuputers. If a site is compromised then it's very likely that Google will detect this and unlsit your site until you remedy the problem. That means loss of traffic and therefore loss of business for your site. \n\n\nPerformance\n\n\nLoad Impact profiled Docker against bare metal, meaning servers without any virtualization, and found near bare metal performance using Docker. They generally found performance of Docker vs. Bare Metal was very similar. You pay a small penalty for using Docker rather than bare metal, but the benefits of added security and isolation more than makes up for this short coming.\n\n\n\n\nhttp://blog.loadimpact.com/blog/wordpress-bare-metal-vs-wordpress-docker-performance-comparison/\n\n\n\n\nMaintainace and Upgrading Containers\n\n\nSee \nMaintainace and Upgrading",
            "title": "Why use Docker with WordPress"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#why-use-docker-with-wordpress",
            "text": "",
            "title": "Why Use Docker with WordPress?"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#security",
            "text": "",
            "title": "Security"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#malware",
            "text": "WordPress sites are often hacked. Often the issue is not core WP but instead an insecure plugin, like for instance recently it was Gravity forms. Once a site is hacked, it then has to be cleaned up. Malware can infect all files on all sites owned by the same Unix user. Companies like Sucuri or Sitelock focus on monitoring for such hacks and provide remediation services to clean up the site once the site is hacked. They encourage users to keep their sites updated, but often this is not enough as the vunerability is discovered after it has been used to exploit many sites. Docker helps by isolating each site in its container, keeping the malware confined to a single exploited site. There are other methods of doing this, like Chroot, but Docker makes this trivial.",
            "title": "Malware"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#data-theft",
            "text": "Once a site is exploited, all data on the site is available for the attacker to download. If multiple sites are running on the same server with the same user, say www-data, or the same group with the wrong file permissions. Then all data for all sites can be accessed by the attacker. This allows the attacked to steal hashed passwords, private information, usernames or anything else that might be of value and is accessible by the user. That can then later be used to attack yet other sites and deface them, steal e-mails, and so on.",
            "title": "Data theft"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#loss-of-search-engine-ranking",
            "text": "Exploited sites may produce different content which could cause your listing to lose rank. They may also host malware which is served to desktop comuputers. If a site is compromised then it's very likely that Google will detect this and unlsit your site until you remedy the problem. That means loss of traffic and therefore loss of business for your site.",
            "title": "Loss of search engine ranking"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#performance",
            "text": "Load Impact profiled Docker against bare metal, meaning servers without any virtualization, and found near bare metal performance using Docker. They generally found performance of Docker vs. Bare Metal was very similar. You pay a small penalty for using Docker rather than bare metal, but the benefits of added security and isolation more than makes up for this short coming.   http://blog.loadimpact.com/blog/wordpress-bare-metal-vs-wordpress-docker-performance-comparison/",
            "title": "Performance"
        },
        {
            "location": "/docker/Why-use-Docker-with-WordPress/#maintainace-and-upgrading-containers",
            "text": "See  Maintainace and Upgrading",
            "title": "Maintainace and Upgrading Containers"
        },
        {
            "location": "/links/",
            "text": "Uses linking to the MySQL container and includes Apache and FPM in the contianer.\n- \nOfficial WordPress from Docker Library\n{:rel=nofollow}\n\n\nIncludes everything you need in a container including the database, gets heavy with too many sites. Also you have to add an Nginx proxy for more than one server.\n- https://github.com/eugeneware/docker-wordpress-nginx\n\n\nUses tatum WordPress container. Goes through the entire process.\n- https://www.digitalocean.com/community/tutorials/how-to-dockerise-and-deploy-multiple-wordpress-applications-on-ubuntu\n\n\n\n\nhttps://intercityup.com/blog/using-docker-to-host-this-wordpress-blog.html\n\n\nhttp://www.sitepoint.com/how-to-use-the-official-docker-wordpress-image/\n\n\nhttp://www.centurylinklabs.com/tutorials/wordpress-in-a-docker-container-on-the-centurylink-cloud/",
            "title": "Home"
        }
    ]
}